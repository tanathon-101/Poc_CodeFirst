using Microsoft.EntityFrameworkCore;
using MyApi.Entities;
using MyApi.Entities.Employees;
using MyApi.Entities.Projects;


public class EmployeeContext : DbContext
{
    public EmployeeContext(DbContextOptions options)
        : base(options)
    {
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<EmployeeProject>()
     .HasKey(ep => new { ep.EmployeeId, ep.ProjectId });

        modelBuilder.Entity<EmployeeProject>()
            .HasOne(ep => ep.Project)
            .WithMany() // ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Project.EmployeeProjects ‡πÅ‡∏•‡πâ‡∏ß
            .HasForeignKey(ep => ep.ProjectId);

        modelBuilder.Entity<EmployeeProject>()
            .HasOne<Employee>() // ‡πÑ‡∏°‡πà‡∏°‡∏µ ep.Employee ‡πÉ‡∏ô model ‡πÅ‡∏•‡πâ‡∏ß
            .WithMany(e => e.EmployeeProjects)
            .HasForeignKey(ep => ep.EmployeeId);

        // üîó One-to-One: Employee <-> EmployeeAddress
        modelBuilder.Entity<Employee>()
        .HasOne(e => e.Address)
        .WithOne() // üëà ‡πÑ‡∏°‡πà‡∏°‡∏µ a => a.Employee ‡πÅ‡∏•‡πâ‡∏ß
        .HasForeignKey<EmployeeAddress>(a => a.EmployeeId);

        // üìå One-to-Many: Employee -> Tasks
        modelBuilder.Entity<EmployeeTask>()
            .HasOne<Employee>() // ‡πÑ‡∏°‡πà‡∏°‡∏µ t.Employee ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
            .WithMany(e => e.Tasks)
            .HasForeignKey(t => t.EmployeeId);

        // ‚úÖ One-to-Many (unidirectional): Employee -> Department
        modelBuilder.Entity<Employee>()
            .HasOne(e => e.Department)
            .WithMany() // ‡πÑ‡∏°‡πà‡∏°‡∏µ Department.Employees ‡πÅ‡∏•‡πâ‡∏ß
            .HasForeignKey(e => e.DepartmentId);
    }

    public DbSet<Employee> Employees { get; set; }
    public DbSet<Department> Departments { get; set; }
    public DbSet<Project> Projects { get; set; }
    public DbSet<EmployeeProject> EmployeeProjects { get; set; }
    public DbSet<EmployeeAddress> EmployeeAddresses { get; set; }
    public DbSet<EmployeeTask> EmployeeTasks { get; set; }
}